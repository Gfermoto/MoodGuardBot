[
    {
        "id": "ca63caabcb27c7c0",
        "type": "tab",
        "label": "–ù–µ–≥–∞—Ç–∏–≤",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c257c6779676a932",
        "type": "telegram receiver",
        "z": "ca63caabcb27c7c0",
        "name": "",
        "bot": "df690a6504c1e710",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 150,
        "y": 80,
        "wires": [
            [
                "e2f6f36b7a716257",
                "fcc6d624e3871207"
            ],
            []
        ]
    },
    {
        "id": "e2f6f36b7a716257",
        "type": "switch",
        "z": "ca63caabcb27c7c0",
        "name": "Check Message Type",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "message",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 180,
        "y": 260,
        "wires": [
            [
                "93916478bd5faa4f"
            ],
            [
                "820fa3bef3c6c32f"
            ]
        ]
    },
    {
        "id": "93916478bd5faa4f",
        "type": "function",
        "z": "ca63caabcb27c7c0",
        "name": "Prepare Text",
        "func": "// Check if msg.payload and msg.payload.content are defined and not empty\nif (msg.payload && msg.payload.content && msg.payload.content.length > 0) {\n    // Remove extra spaces and limit length\n    msg.payload.content = msg.payload.content.trim();\n    if (msg.payload.content.length > 200) {\n        msg.payload.content = msg.payload.content.substring(0, 200);\n    }\n    msg.payload.text = msg.payload.content; // Add msg.payload.text for compatibility with later nodes\n    return msg;\n} else {\n    // If msg.payload or msg.payload.content is undefined or empty, log a warning and return null\n    node.warn(\"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: msg.payload –∏–ª–∏ msg.payload.content –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã–µ\");\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 380,
        "wires": [
            [
                "28e469f52cd410e5"
            ]
        ]
    },
    {
        "id": "f4ed21f493791df1",
        "type": "http request",
        "z": "ca63caabcb27c7c0",
        "name": "Hugging Face API",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api-inference.huggingface.co/models/seara/rubert-base-cased-russian-sentiment",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer –í–°–¢–ê–í–¨–¢–ï_–°–í–û–ô_–¢–û–ö–ï–ù_HUGGING_FACE"
            }
        ],
        "x": 710,
        "y": 160,
        "wires": [
            [
                "0d777935487f5a75"
            ]
        ]
    },
    {
        "id": "0d777935487f5a75",
        "type": "function",
        "z": "ca63caabcb27c7c0",
        "name": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞",
        "func": "// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ—Ç–≤–µ—Ç —è–≤–ª—è–µ—Ç—Å—è JSON, –∞ –Ω–µ HTML\nif (typeof msg.payload === 'string' && msg.payload.includes('<!DOCTYPE html>')) {\n    node.warn('API –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ JSON. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');\n    return null;\n}\n\n// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ HTTP-–æ—Ç–≤–µ—Ç–∞\nif (msg.statusCode !== 200) {\n    node.warn(`–û—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å ${msg.statusCode}`);\n    return null;\n}\n\n// –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\nnode.warn(\"–û—Ç–≤–µ—Ç –æ—Ç API: \" + JSON.stringify(msg.payload, null, 2));\n\n// –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON-–æ—Ç–≤–µ—Ç–∞\nif (msg.payload.error) {\n    node.warn(`–û—à–∏–±–∫–∞ API: ${msg.payload.error}`);\n    return null;\n} else if (Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏\n    const results = msg.payload[0];\n\n    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ results —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º\n    if (Array.isArray(results) && results.length > 0) {\n        // –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é (score)\n        const topResult = results.reduce((prev, current) => {\n            return (prev.score > current.score) ? prev : current;\n        });\n\n        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞\n        node.warn(`–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${topResult.label} (${topResult.score})`);\n\n        if (topResult.label === \"negative\" && topResult.score > 0.8) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏\n            try {\n                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram\n                const replyMessage = {\n                    chatId: msg.chatId || \"–í–°–¢–ê–í–¨–¢–ï_–°–í–û–ô_ID_–ß–ê–¢–ê\", // –ò—Å–ø–æ–ª—å–∑—É–µ–º chatId –∏–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n                    message_thread_id: msg.message_thread_id, // –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø–∏–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å\n                    type: \"message\",\n                    content: \"–í–Ω–∏–º–∞–Ω–∏–µ, –≤ —á–∞—Ç –∑–∞—à–µ–ª –¥—É—à–Ω—ã–π —á–µ–ª–æ–≤–µ–∫! –î–ª—è –Ω–µ–≥–æ –∑–¥–µ—Å—å –µ—Å—Ç—å –æ—Å–æ–±–∞—è –∫–æ–º–Ω–∞—Ç–∞...üòä\"\n                };\n                node.warn(\"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram: \" + JSON.stringify(replyMessage, null, 2));\n                node.warn(\"–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram...\");\n\n                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏\n                return { payload: replyMessage };\n            } catch (error) {\n                node.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error}`);\n                return null;\n            }\n        } else {\n            node.warn(\"–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è –∏–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è.\");\n            return null; // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ\n        }\n    } else {\n        node.warn(\"–û—à–∏–±–∫–∞: –≤–ª–æ–∂–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ results –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º\");\n        return null;\n    }\n} else {\n    node.warn(\"–û—à–∏–±–∫–∞: –æ—Ç–≤–µ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º\");\n    return null;\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 300,
        "wires": [
            [
                "4bfa450c25290315"
            ],
            []
        ]
    },
    {
        "id": "820fa3bef3c6c32f",
        "type": "function",
        "z": "ca63caabcb27c7c0",
        "name": "Handle Non-Text Message",
        "func": "// Handle non-text messages (e.g., photos, stickers)\nnode.warn('–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');\n// You can add logic here to handle different message types\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "b53718c0cc871038",
        "type": "debug",
        "z": "ca63caabcb27c7c0",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 100,
        "wires": []
    },
    {
        "id": "28e469f52cd410e5",
        "type": "function",
        "z": "ca63caabcb27c7c0",
        "name": "Prepare HTTP Request",
        "func": "msg.payload = {\n    inputs: msg.payload.text\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 240,
        "wires": [
            [
                "f4ed21f493791df1"
            ]
        ]
    },
    {
        "id": "118a9e58a48ede73",
        "type": "telegram sender",
        "z": "ca63caabcb27c7c0",
        "name": "–ì—Ä—É–ø–ø–∞ TG",
        "bot": "df690a6504c1e710",
        "haserroroutput": false,
        "outputs": 1,
        "x": 710,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "92b31c8adcba05c3",
        "type": "catch",
        "z": "ca63caabcb27c7c0",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 480,
        "y": 140,
        "wires": [
            [
                "b53718c0cc871038"
            ]
        ]
    },
    {
        "id": "fcc6d624e3871207",
        "type": "function",
        "z": "ca63caabcb27c7c0",
        "d": true,
        "name": "Time Check (22:00 - 07:00)",
        "func": "// Get the current hour (in 24-hour format)\nconst now = new Date();\nconst hour = now.getHours();\n\n// Check if the current time is within the allowed range (22:00 - 07:00)\nif (hour >= 22 || hour < 7) {\n    // If within the allowed range, pass the message to the next node\n    return msg;\n} else {\n    // If outside the allowed range, discard the message\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 40,
        "wires": [
            [
                "b53718c0cc871038"
            ]
        ]
    },
    {
        "id": "4bfa450c25290315",
        "type": "delay",
        "z": "ca63caabcb27c7c0",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 710,
        "y": 420,
        "wires": [
            [
                "118a9e58a48ede73"
            ]
        ]
    },
    {
        "id": "df690a6504c1e710",
        "type": "telegram bot",
        "botname": "–í–°–¢–ê–í–¨–¢–ï_–ò–ú–Ø_–ë–û–¢–ê",
        "usernames": "",
        "chatids": "–í–°–¢–ê–í–¨–¢–ï_–°–í–û–ô_ID_–ß–ê–¢–ê",
        "baseapiurl": "",
        "testenvironment": false,
        "updatemode": "polling",
        "pollinterval": "2500",
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    }
]
